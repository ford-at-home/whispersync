name: PR Validation

# Trigger on all PR events
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

# Cancel in-progress runs when a new push is made
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality checks
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Run flake8
        run: |
          flake8 agents/ lambda_fn/ scripts/ tests/ \
            --count --select=E9,F63,F7,F82 --show-source --statistics \
            --max-line-length=120 --extend-ignore=E203,W503
            
      - name: Check black formatting
        run: |
          black --check agents/ lambda_fn/ scripts/ tests/

  # Unit tests with coverage
  test:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pytest-cov
          
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v \
            --cov=agents --cov=lambda_fn \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=test-results.xml
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.python-version == '3.11'  # Only upload once
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/
            
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests (Python ${{ matrix.python-version }})
          path: test-results.xml
          reporter: java-junit

  # CDK validation
  cdk-validation:
    name: CDK Synthesis Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cdk-${{ hashFiles('requirements-cdk.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cdk-
            
      - name: Install CDK dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cdk.txt
          npm install -g aws-cdk
          
      - name: CDK Synth
        working-directory: infrastructure
        run: |
          cdk synth --no-staging > cdk-synth.log
          
      - name: Upload CDK synthesis output
        uses: actions/upload-artifact@v4
        with:
          name: cdk-synth-output
          path: infrastructure/cdk-synth.log

  # Security checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # PR Status Check
  pr-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [lint, test, cdk-validation, security]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.cdk-validation.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All validation checks passed!"